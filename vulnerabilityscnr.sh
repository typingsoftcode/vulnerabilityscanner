#!/bin/bash

# Global variables
LOG_FILE="nmap_scan.log"
VERBOSE=false
HTML_REPORT=false

# Function to log messages
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    echo "[$timestamp] [$level] $message" >> "$LOG_FILE"
    if [ "$VERBOSE" = true ] || [ "$level" = "ERROR" ]; then
        echo "[$level] $message"
    fi
}

# Function to validate IP address or CIDR notation
validate_ip_or_cidr() {
    if [[ $1 =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/[0-9]{1,2})?$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to check root privileges
check_root() {
    if [ "$EUID" -ne 0 ]; then
        log_message "ERROR" "This script requires root privileges. Please run with sudo."
        exit 1
    fi
}

# Function to check if nmap is installed
check_nmap() {
    if ! command -v nmap &> /dev/null; then
        log_message "ERROR" "nmap is not installed. Please install nmap and try again."
        exit 1
    fi
}

# Function to choose scan type
choose_scan_type() {
    echo "Choose a scan type:"
    echo "1) Quick Scan (-F)"
    echo "2) Full Scan (-p-)"
    echo "3) Vulnerability Scan (-sV -sC --script vuln)"
    read -p "Enter your choice (1-3): " scan_choice

    case $scan_choice in
        1) scan_type="quick"; scan_options="-F" ;;
        2) scan_type="full"; scan_options="-p-" ;;
        3) scan_type="vuln"; scan_options="-sV -sC --script vuln" ;;
        *) log_message "WARNING" "Invalid choice. Defaulting to Vulnerability Scan."; 
           scan_type="vuln"; scan_options="-sV -sC --script vuln" ;;
    esac
    log_message "INFO" "Scan type selected: $scan_type"
}

# Function to choose output format
choose_output_format() {
    echo "Choose an output format:"
    echo "1) Normal"
    echo "2) XML"
    echo "3) JSON"
    read -p "Enter your choice (1-3): " format_choice

    case $format_choice in
        1) output_format="normal"; output_option="" ;;
        2) output_format="XML"; output_option="-oX -" ;;
        3) output_format="JSON"; output_option="-oJ -" ;;
        *) log_message "WARNING" "Invalid choice. Defaulting to Normal output."; 
           output_format="normal"; output_option="" ;;
    esac
    log_message "INFO" "Output format selected: $output_format"
}

# Function to parse and display results
parse_and_display_results() {
    case $output_format in
        normal)
            echo "Summary of open ports and services:"
            echo "$nmap_result" | grep -E "PORT|/tcp|/udp" | sed 's/^[[:space:]]*//'
            
            if [ "$scan_type" = "vuln" ]; then
                echo -e "\nPotential vulnerabilities:"
                echo "$nmap_result" | awk '/^\|.*VULNERABLE/{print}' | sed 's/^[[:space:]]*//'
            fi
            ;;
        XML)
            echo "XML output generated. Displaying summary:"
            echo "$nmap_result" | grep -E "<port |<state |<service " | head -n 10
            echo "... (truncated for brevity)"
            ;;
        JSON)
            echo "JSON output generated. Displaying summary:"
            if command -v jq &> /dev/null; then
                echo "$nmap_result" | jq '.nmaprun.host[].ports.port[] | {portid, protocol, state: .state.state, service: .service.name}' 2>/dev/null | head -n 10
            else
                log_message "WARNING" "jq not found. Displaying raw JSON (truncated)."
                echo "$nmap_result" | head -n 10
            fi
            echo "... (truncated for brevity)"
            ;;
    esac
}

# Function to show progress
show_progress() {
    local pid=$1
    local delay=0.5
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Function to analyze results and generate insights
analyze_results() {
    local open_ports=$(echo "$nmap_result" | grep -E "^[0-9]+/tcp" | wc -l)
    local high_risk_ports=$(echo "$nmap_result" | grep -E "^(20|21|22|23|25|53|110|135|139|445|1433|1521|3306|3389|5432)/tcp" | wc -l)
    local vulnerabilities=$(echo "$nmap_result" | grep -i "VULNERABLE" | wc -l)

    echo "Scan Analysis:"
    echo "- Total open ports: $open_ports"
    echo "- High-risk ports open: $high_risk_ports"
    if [ "$scan_type" = "vuln" ]; then
        echo "- Potential vulnerabilities found: $vulnerabilities"
    fi

    echo -e "\nRecommendations:"
    if [ $high_risk_ports -gt 0 ]; then
        echo "- Review and secure high-risk open ports"
    fi
    if [ $vulnerabilities -gt 0 ]; then
        echo "- Address identified vulnerabilities immediately"
    fi
    echo "- Implement a regular vulnerability scanning schedule"
    echo "- Keep all systems and applications up-to-date"
}

# Function to generate HTML report
generate_html_report() {
    local report_file="nmap_report_${timestamp}.html"
    
    cat << EOF > "$report_file"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nmap Scan Report</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1, h2 { color: #2c3e50; }
        pre { background-color: #f4f4f4; padding: 10px; border-radius: 5px; overflow-x: auto; }
        .vulnerability { color: #e74c3c; }
        .recommendation { color: #27ae60; }
    </style>
</head>
<body>
    <h1>Nmap Scan Report</h1>
    <p><strong>Target:</strong> $target</p>
    <p><strong>Scan Type:</strong> $scan_type</p>
    <p><strong>Timestamp:</strong> $timestamp</p>
    
    <h2>Scan Results</h2>
    <pre>$(echo "$nmap_result" | grep -E "PORT|/tcp|/udp|^\|" | sed 's/</\&lt;/g; s/>/\&gt;/g')</pre>
    
    <h2>Analysis</h2>
    <pre>$(analyze_results)</pre>
    
    <h2>Full Scan Output</h2>
    <pre>$(cat "$output_file" | sed 's/</\&lt;/g; s/>/\&gt;/g')</pre>
</body>
</html>
EOF

    chmod 600 "$report_file"
    log_message "INFO" "HTML report generated: $report_file"
    echo "HTML report generated: $report_file"
}

# Main function
main() {
    check_root
    check_nmap

    # Parse command line options
    while getopts "vH" opt; do
        case $opt in
            v)
                VERBOSE=true
                log_message "INFO" "Verbose mode enabled"
                ;;
            H)
                HTML_REPORT=true
                log_message "INFO" "HTML report generation enabled"
                ;;
            \?)
                log_message "ERROR" "Invalid option: -$OPTARG"
                exit 1
                ;;
        esac
    done

    # Ask user for target IP or network range
    while true; do
        read -p "Enter the target IP address or network range (e.g., 192.168.1.0/24): " target
        if validate_ip_or_cidr "$target"; then
            break
        else
            log_message "ERROR" "Invalid input. Please enter a valid IP address or CIDR notation."
        fi
    done

    choose_scan_type
    choose_output_format

    log_message "INFO" "Starting $scan_type scan on $target..."

    # Generate a timestamp for the output file
    timestamp=$(date +"%Y%m%d_%H%M%S")
    output_file="nmap_scan_${timestamp}.${output_format,,}"

    # Perform Nmap scan with error handling and progress indicator
    (nmap $scan_options $output_option "$target" > "$output_file") &
    nmap_pid=$!
    show_progress $nmap_pid

    if ! nmap_result=$(cat "$output_file"); then
        log_message "ERROR" "Error occurred during Nmap scan. Check $output_file for details."
        exit 1
    fi

    chmod 600 "$output_file"
    log_message "INFO" "Scan completed. Full results saved to $output_file"

    # Display summary of results
    echo -e "\nScan complete. Summary of results:"
    echo "--------------------------------"
    parse_and_display_results
    echo "--------------------------------"
    analyze_results
    echo "--------------------------------"
    log_message "INFO" "Scan finished. Full results are available in $output_file"

    if [ "$HTML_REPORT" = true ]; then
        generate_html_report
    fi
}

# Run the main function
main "$@"
